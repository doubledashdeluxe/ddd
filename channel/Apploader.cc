#include "Apploader.hh"

#include <common/Align.hh>
#include <common/DiscID.hh>
#include <common/ICache.hh>
#include <common/Log.hh>
extern "C" {
#include <monocypher/monocypher.h>

#include <string.h>
}

Apploader::GameEntryFunc Apploader::Run(ReadFunc read) {
    const Array<u8, 32> *hashes;
    switch (DiscID::Get().gameID[3]) {
    case 'P':
        hashes = HashesP;
        break;
    case 'E':
        hashes = HashesE;
        break;
    case 'J':
        hashes = HashesJ;
        break;
    default:
        ERROR("Invalid region.");
        return nullptr;
    }

    alignas(0x20) ApploaderHeader header;
    if (!Read(read, &header, sizeof(header), 0x2440, hashes)) {
        ERROR("Failed to read apploader header.");
        return nullptr;
    }
    INFO("Successfully read apploader header.");

    if (!Read(read, reinterpret_cast<void *>(0x81200000),
                AlignUp(header.size + header.trailer, 0x20), 0x2460, hashes)) {
        ERROR("Failed to read apploader.");
        return nullptr;
    }
    ICache::Invalidate(reinterpret_cast<void *>(0x81200000), header.size + header.trailer);
    INFO("Successfully read apploader.");

    ApploaderInitFunc init;
    ApploaderMainFunc main;
    ApploaderCloseFunc close;
    header.entry(&init, &main, &close);

    init(Report);

    void *dst;
    u32 size;
    u32 offset;
    while (main(&dst, &size, &offset)) {
        if (!Read(read, dst, size, offset, hashes)) {
            ERROR("Failed to read dol section.");
            return nullptr;
        }
        ICache::Invalidate(dst, size);
    }
    INFO("Successfully read dol.");

    return close();
}

bool Apploader::Read(ReadFunc read, void *dst, u32 size, u32 offset, const Array<u8, 32> *&hashes) {
    if (!read(dst, size, offset)) {
        return false;
    }
    Array<u8, 32> hash;
    crypto_blake2b(hash.values(), hash.count(), reinterpret_cast<u8 *>(dst), size);
    if (crypto_verify32(hash.values(), (*hashes++).values())) {
        ERROR("Please ensure that the game disc is not modified in any capacity!");
        return false;
    }
    return true;
}

void Apploader::Report(const char * /* format */, ...) {}

const Array<u8, 32> Apploader::HashesP[18] = {
        Array<u8, 32>((u8[32]){0x53, 0x29, 0xa2, 0x07, 0x53, 0x51, 0x44, 0x61, 0xeb, 0x76, 0x6c,
                0x28, 0x07, 0xf7, 0x4f, 0xe3, 0x77, 0xdc, 0x8a, 0x78, 0x50, 0xd9, 0x98, 0x29, 0x1d,
                0xbe, 0x40, 0x64, 0x2b, 0x52, 0xe0, 0x95}),
        Array<u8, 32>((u8[32]){0x00, 0x44, 0xe8, 0x36, 0x58, 0xb6, 0xb4, 0x5f, 0x85, 0x74, 0x5c,
                0xb7, 0x5f, 0x8e, 0xc9, 0x3e, 0xae, 0x13, 0x57, 0xbd, 0xf6, 0xe6, 0x0a, 0xfb, 0xd7,
                0x34, 0x7f, 0x05, 0xcf, 0xde, 0x46, 0x13}),
        Array<u8, 32>((u8[32]){0x52, 0x96, 0xeb, 0x6e, 0x82, 0xab, 0x8d, 0xd7, 0xac, 0x58, 0x26,
                0x20, 0x07, 0xe8, 0x4c, 0xda, 0x90, 0xa9, 0x3a, 0x2f, 0x72, 0x8d, 0xde, 0x28, 0x44,
                0xae, 0x23, 0xdf, 0xa9, 0x1d, 0xf0, 0x49}),
        Array<u8, 32>((u8[32]){0x2b, 0xcc, 0x82, 0xfb, 0x95, 0x65, 0xe6, 0xd9, 0xe7, 0x41, 0xbe,
                0x63, 0x31, 0xcb, 0xc1, 0x19, 0xf8, 0x01, 0x78, 0x1d, 0x64, 0xa1, 0x04, 0x0c, 0x4b,
                0x5c, 0x86, 0xe5, 0xe5, 0xfc, 0xe7, 0xa6}),
        Array<u8, 32>((u8[32]){0x72, 0xe3, 0xae, 0x11, 0x6a, 0xe3, 0x62, 0x88, 0x27, 0x1e, 0xc2,
                0x8c, 0x9e, 0xe2, 0xbf, 0x27, 0x4a, 0x8d, 0x23, 0xa1, 0x87, 0xe2, 0x8e, 0xe3, 0x60,
                0xf7, 0xfc, 0x73, 0x47, 0xb2, 0xec, 0x7a}),
        Array<u8, 32>((u8[32]){0xd9, 0x12, 0xda, 0xf6, 0x86, 0x80, 0x3a, 0x96, 0xa9, 0xfc, 0x65,
                0x48, 0xa6, 0x87, 0xc6, 0x88, 0x60, 0xad, 0x27, 0x60, 0x31, 0xab, 0x0d, 0x6a, 0x8a,
                0x61, 0x43, 0xc1, 0x5e, 0xb2, 0x26, 0xb6}),
        Array<u8, 32>((u8[32]){0xf0, 0x33, 0x7d, 0x1e, 0xaf, 0xe4, 0xd3, 0x5c, 0x85, 0x7a, 0x8f,
                0x23, 0x93, 0xf3, 0xb0, 0xae, 0xf4, 0xda, 0x77, 0x8d, 0xb6, 0xce, 0x2d, 0x98, 0x22,
                0xf6, 0x53, 0xf2, 0xd5, 0xd9, 0x81, 0x75}),
        Array<u8, 32>((u8[32]){0xc0, 0x6b, 0xba, 0xea, 0x77, 0xbb, 0x2b, 0x78, 0x54, 0x3a, 0xa1,
                0xf5, 0xcb, 0x95, 0xdc, 0x09, 0xfa, 0xc2, 0x6c, 0x8d, 0xf1, 0x40, 0x8e, 0xd9, 0x9c,
                0x34, 0x09, 0xaa, 0x4b, 0x52, 0x9d, 0x69}),
        Array<u8, 32>((u8[32]){0x92, 0x49, 0x81, 0xbe, 0xc7, 0x1c, 0xb3, 0x6f, 0xe5, 0x43, 0xda,
                0x7a, 0xc7, 0x55, 0xcf, 0xef, 0x2a, 0xe1, 0x45, 0x3b, 0x5d, 0x0c, 0x1e, 0x8b, 0xe7,
                0xb5, 0xb7, 0xfe, 0x5f, 0x0e, 0x1b, 0x2f}),
        Array<u8, 32>((u8[32]){0x68, 0x6b, 0xdb, 0x81, 0x1f, 0x58, 0x0f, 0x04, 0x5b, 0x38, 0x7e,
                0xfa, 0x54, 0xa5, 0xee, 0xa9, 0xda, 0x44, 0x26, 0x5d, 0x20, 0xb3, 0xf7, 0x1c, 0x50,
                0x7f, 0x6b, 0x3f, 0x06, 0x3c, 0x14, 0xe1}),
        Array<u8, 32>((u8[32]){0xdd, 0xb4, 0xd1, 0x82, 0xf8, 0x58, 0x16, 0xc1, 0x72, 0xcb, 0xa3,
                0x3f, 0x81, 0xe9, 0xe8, 0x6f, 0x4a, 0x2f, 0x12, 0x1f, 0x8b, 0x40, 0x3e, 0x5b, 0x9d,
                0x57, 0x58, 0x01, 0x4f, 0x1e, 0x27, 0xd3}),
        Array<u8, 32>((u8[32]){0xe1, 0xc8, 0xe1, 0xa9, 0x01, 0xd7, 0x54, 0x7a, 0x1a, 0x04, 0x6a,
                0xfa, 0x45, 0xb0, 0xaa, 0x1e, 0xcb, 0x6a, 0xf5, 0x9d, 0x18, 0xf2, 0x47, 0xb1, 0x95,
                0x88, 0xc6, 0x61, 0xc5, 0xd9, 0xc8, 0x45}),
        Array<u8, 32>((u8[32]){0xcc, 0x34, 0x84, 0x43, 0x13, 0x52, 0xc1, 0x9e, 0x4d, 0x0b, 0xe8,
                0xee, 0xde, 0x29, 0x37, 0x28, 0x13, 0xc7, 0x8d, 0x6b, 0xec, 0x9c, 0xf9, 0x8d, 0x42,
                0xd5, 0x16, 0x72, 0x7f, 0x3e, 0xee, 0xd4}),
        Array<u8, 32>((u8[32]){0x33, 0xfd, 0x8f, 0x5c, 0xb7, 0x3d, 0x8f, 0x82, 0x74, 0x01, 0xd0,
                0xec, 0x3f, 0x2a, 0xd4, 0xc1, 0x56, 0xb9, 0x81, 0x26, 0x20, 0x20, 0x0a, 0xd0, 0xff,
                0x88, 0xdf, 0x48, 0xc1, 0x80, 0xa4, 0x6b}),
        Array<u8, 32>((u8[32]){0x0b, 0x4c, 0x8a, 0x44, 0x1e, 0x55, 0xfc, 0x95, 0x56, 0x02, 0x9c,
                0x7b, 0x5c, 0x9e, 0x91, 0x3a, 0xba, 0xcb, 0x0b, 0x35, 0x32, 0xab, 0x65, 0x97, 0x7e,
                0xfc, 0xfc, 0xb6, 0x18, 0x36, 0xae, 0x74}),
        Array<u8, 32>((u8[32]){0x56, 0xad, 0x04, 0xd5, 0xa8, 0x3b, 0x2c, 0x6b, 0x17, 0x20, 0x8e,
                0x37, 0xdc, 0xa6, 0xbd, 0xb8, 0xa5, 0x75, 0x54, 0xde, 0x87, 0x11, 0x13, 0x4f, 0x00,
                0x4e, 0x9b, 0xaf, 0x58, 0x97, 0x8b, 0x9e}),
        Array<u8, 32>((u8[32]){0x81, 0x81, 0x9c, 0xdc, 0x1d, 0x58, 0x6f, 0xfd, 0xed, 0x0e, 0x87,
                0x3e, 0x5d, 0x82, 0x5b, 0xe6, 0x1a, 0x79, 0xe6, 0x0e, 0xef, 0x54, 0x7f, 0x99, 0x61,
                0xc2, 0xba, 0xc7, 0x7a, 0xb5, 0x12, 0x04}),
        Array<u8, 32>((u8[32]){0xcf, 0x65, 0x03, 0x0e, 0xa9, 0xed, 0x87, 0x32, 0xf5, 0x7d, 0xa3,
                0xd9, 0x85, 0x58, 0xf2, 0x07, 0x03, 0x3b, 0xa9, 0xb9, 0x01, 0xbf, 0xc9, 0x82, 0x8f,
                0x9e, 0xdd, 0xc4, 0x8d, 0xe4, 0x39, 0x01}),
};
const Array<u8, 32> Apploader::HashesE[18] = {
        Array<u8, 32>((u8[32]){0x53, 0x29, 0xa2, 0x07, 0x53, 0x51, 0x44, 0x61, 0xeb, 0x76, 0x6c,
                0x28, 0x07, 0xf7, 0x4f, 0xe3, 0x77, 0xdc, 0x8a, 0x78, 0x50, 0xd9, 0x98, 0x29, 0x1d,
                0xbe, 0x40, 0x64, 0x2b, 0x52, 0xe0, 0x95}),
        Array<u8, 32>((u8[32]){0x00, 0x44, 0xe8, 0x36, 0x58, 0xb6, 0xb4, 0x5f, 0x85, 0x74, 0x5c,
                0xb7, 0x5f, 0x8e, 0xc9, 0x3e, 0xae, 0x13, 0x57, 0xbd, 0xf6, 0xe6, 0x0a, 0xfb, 0xd7,
                0x34, 0x7f, 0x05, 0xcf, 0xde, 0x46, 0x13}),
        Array<u8, 32>((u8[32]){0x77, 0xde, 0x2f, 0x97, 0x04, 0x3a, 0xc2, 0x97, 0x5d, 0x7a, 0xcd,
                0xce, 0xe9, 0xb6, 0xf3, 0x75, 0xe9, 0xdc, 0x89, 0xe9, 0x3c, 0x27, 0xe9, 0xf1, 0x31,
                0x95, 0xf2, 0x26, 0x98, 0xe8, 0xc8, 0x18}),
        Array<u8, 32>((u8[32]){0x13, 0x53, 0x60, 0x81, 0x42, 0x4a, 0xc4, 0x25, 0xe5, 0x71, 0x9b,
                0x58, 0x7c, 0x35, 0xce, 0xab, 0xdd, 0xe7, 0x8b, 0x26, 0x77, 0xdb, 0xec, 0x3f, 0x61,
                0x14, 0xff, 0x31, 0xf8, 0xb3, 0x19, 0x1a}),
        Array<u8, 32>((u8[32]){0x08, 0x1e, 0x05, 0xdc, 0x91, 0xb2, 0x69, 0x31, 0xf1, 0x57, 0x9c,
                0x9d, 0x93, 0x5b, 0x77, 0xfa, 0x80, 0x29, 0x57, 0xcc, 0x7e, 0xe7, 0xe9, 0xf6, 0x7f,
                0xc1, 0x5e, 0xbd, 0x72, 0x38, 0xc2, 0x42}),
        Array<u8, 32>((u8[32]){0xbd, 0x46, 0xa7, 0xc8, 0xb2, 0xad, 0xf8, 0x1a, 0xb1, 0xf4, 0x44,
                0x7f, 0x86, 0x03, 0xcb, 0xbc, 0x9a, 0xf2, 0x1e, 0xb8, 0xc1, 0xc0, 0x9e, 0xa5, 0xe2,
                0x13, 0x26, 0x78, 0xc8, 0x9f, 0x4b, 0xa4}),
        Array<u8, 32>((u8[32]){0xd4, 0xa1, 0x75, 0x2a, 0x3b, 0x51, 0xf1, 0x70, 0x40, 0x8d, 0x76,
                0x0f, 0x25, 0xbb, 0x02, 0x93, 0xce, 0x6e, 0xbe, 0xd5, 0x71, 0x43, 0x77, 0xbc, 0x80,
                0xe5, 0x3b, 0x5f, 0x35, 0xbf, 0x61, 0x65}),
        Array<u8, 32>((u8[32]){0x7b, 0x02, 0x46, 0x2f, 0x0c, 0xe7, 0xb3, 0x96, 0x9d, 0x7d, 0x49,
                0xd6, 0x1c, 0x88, 0x6a, 0xcf, 0xcd, 0xe4, 0x28, 0xc8, 0xd9, 0xfe, 0x16, 0x3d, 0x38,
                0x17, 0x7b, 0xc8, 0x68, 0xe8, 0xd9, 0xf9}),
        Array<u8, 32>((u8[32]){0x3f, 0xa7, 0xe7, 0x8e, 0xfe, 0x95, 0xcc, 0x86, 0x50, 0xb5, 0xa3,
                0xf0, 0xa6, 0x5f, 0xd7, 0xdb, 0xfb, 0x51, 0x82, 0xdd, 0x26, 0x2e, 0xb7, 0xdb, 0x56,
                0xbb, 0x41, 0x1b, 0x2b, 0xfa, 0xfe, 0x3a}),
        Array<u8, 32>((u8[32]){0x75, 0xe3, 0x97, 0x9a, 0x0a, 0xe2, 0x03, 0x06, 0x2a, 0x17, 0xb1,
                0x7f, 0x16, 0x5c, 0x4a, 0xfe, 0x31, 0x96, 0x0b, 0x79, 0xb5, 0x3c, 0xeb, 0x6b, 0x38,
                0xc7, 0x6c, 0xe2, 0x80, 0x45, 0x93, 0xd7}),
        Array<u8, 32>((u8[32]){0x92, 0xa9, 0x91, 0xec, 0x19, 0x0d, 0x22, 0xd2, 0x04, 0x58, 0xf9,
                0x5c, 0x88, 0xe5, 0x6c, 0x17, 0x1c, 0xde, 0xf6, 0xb3, 0x48, 0xfb, 0x74, 0xe2, 0xdc,
                0x16, 0x5b, 0x8f, 0xc3, 0xce, 0x63, 0x6a}),
        Array<u8, 32>((u8[32]){0x86, 0xa5, 0xe4, 0x54, 0x70, 0x27, 0x4e, 0x9a, 0x1f, 0x93, 0xc7,
                0x5d, 0xb9, 0x15, 0xda, 0x78, 0x54, 0x34, 0xc6, 0x87, 0x00, 0x51, 0x59, 0xe1, 0x8f,
                0xea, 0xd9, 0x67, 0x3c, 0xbe, 0x86, 0x62}),
        Array<u8, 32>((u8[32]){0xd4, 0xc5, 0xea, 0x3d, 0xb6, 0x99, 0x5d, 0x49, 0x0a, 0xaa, 0x88,
                0x92, 0x0a, 0x00, 0x5e, 0x2d, 0xe3, 0xef, 0xa8, 0xa2, 0xd4, 0x24, 0xf6, 0x30, 0xaf,
                0x8e, 0x32, 0x7b, 0x3c, 0x29, 0xfc, 0xd6}),
        Array<u8, 32>((u8[32]){0xaa, 0xf5, 0x3e, 0x97, 0x8d, 0x56, 0xde, 0x1f, 0x59, 0x8f, 0x63,
                0xdc, 0x6f, 0xca, 0x15, 0xce, 0xbd, 0xa2, 0x15, 0xa0, 0x3a, 0xbf, 0xc2, 0x68, 0x20,
                0x1e, 0xbf, 0x5b, 0x50, 0x31, 0xb1, 0xac}),
        Array<u8, 32>((u8[32]){0x68, 0x8a, 0xa2, 0x6d, 0x09, 0xf6, 0xf0, 0x2b, 0xa4, 0x9c, 0x35,
                0x37, 0xe5, 0x29, 0x54, 0xb3, 0x48, 0x4c, 0x7a, 0xf7, 0x76, 0x70, 0x54, 0x9f, 0x18,
                0xba, 0x37, 0xee, 0xe3, 0xeb, 0xa0, 0x1f}),
        Array<u8, 32>((u8[32]){0xb6, 0xb2, 0x4e, 0xec, 0x2d, 0x1f, 0xe6, 0xab, 0x12, 0x53, 0xe2,
                0x98, 0xf2, 0x43, 0x2a, 0x64, 0x79, 0x1c, 0xa7, 0xd6, 0xe9, 0xe3, 0x85, 0x04, 0x1c,
                0x2e, 0x9d, 0x68, 0x93, 0x5a, 0x89, 0xfd}),
        Array<u8, 32>((u8[32]){0xe3, 0xfc, 0x9b, 0x51, 0x1f, 0x8f, 0x02, 0x26, 0xfc, 0xb0, 0x62,
                0x43, 0x42, 0x26, 0xc5, 0xd4, 0xfd, 0xf4, 0x9c, 0x91, 0xfc, 0x09, 0x9d, 0xb1, 0x54,
                0x82, 0xfc, 0x4f, 0x1c, 0x53, 0x72, 0x5c}),
        Array<u8, 32>((u8[32]){0xb5, 0xcc, 0xf8, 0x4b, 0x42, 0x3c, 0x5a, 0xeb, 0x76, 0x78, 0x7e,
                0x8e, 0x3f, 0x6f, 0x46, 0x0e, 0x4b, 0xd4, 0x3a, 0xec, 0x08, 0xe8, 0x81, 0x36, 0xfd,
                0xee, 0x94, 0x12, 0x0a, 0xcb, 0xdc, 0xed}),
};
const Array<u8, 32> Apploader::HashesJ[18] = {
        Array<u8, 32>((u8[32]){0x53, 0x29, 0xa2, 0x07, 0x53, 0x51, 0x44, 0x61, 0xeb, 0x76, 0x6c,
                0x28, 0x07, 0xf7, 0x4f, 0xe3, 0x77, 0xdc, 0x8a, 0x78, 0x50, 0xd9, 0x98, 0x29, 0x1d,
                0xbe, 0x40, 0x64, 0x2b, 0x52, 0xe0, 0x95}),
        Array<u8, 32>((u8[32]){0x00, 0x44, 0xe8, 0x36, 0x58, 0xb6, 0xb4, 0x5f, 0x85, 0x74, 0x5c,
                0xb7, 0x5f, 0x8e, 0xc9, 0x3e, 0xae, 0x13, 0x57, 0xbd, 0xf6, 0xe6, 0x0a, 0xfb, 0xd7,
                0x34, 0x7f, 0x05, 0xcf, 0xde, 0x46, 0x13}),
        Array<u8, 32>((u8[32]){0xc6, 0xfc, 0x73, 0xd1, 0xc4, 0x07, 0xfe, 0x2f, 0xeb, 0x8b, 0xcc,
                0x52, 0x25, 0x04, 0x0a, 0xe7, 0x90, 0x19, 0x5e, 0xe6, 0xf2, 0x03, 0xaa, 0xa9, 0xe4,
                0x68, 0x0c, 0x5f, 0xfb, 0xcf, 0x71, 0x36}),
        Array<u8, 32>((u8[32]){0x1a, 0xda, 0xcc, 0x59, 0xf4, 0xc8, 0x68, 0x79, 0xf7, 0x08, 0x9e,
                0x1f, 0x72, 0xe1, 0xdf, 0xcd, 0xac, 0x47, 0xcd, 0x3b, 0xd9, 0xf6, 0x7a, 0x9a, 0x2a,
                0x52, 0xa7, 0x72, 0x4f, 0x07, 0xad, 0x2b}),
        Array<u8, 32>((u8[32]){0x2f, 0xcd, 0x29, 0x32, 0x55, 0xa8, 0xf2, 0xe6, 0x41, 0x59, 0x75,
                0x17, 0xb6, 0x86, 0xba, 0x57, 0xd4, 0xf2, 0x59, 0x3c, 0xd9, 0x96, 0x54, 0x34, 0x72,
                0x71, 0x9d, 0xa6, 0x40, 0x64, 0x6b, 0x68}),
        Array<u8, 32>((u8[32]){0x07, 0x27, 0x5f, 0x43, 0xf8, 0xf7, 0x1e, 0xf7, 0x3b, 0x2a, 0xe1,
                0xae, 0x8c, 0x14, 0xdc, 0x1e, 0x72, 0x4d, 0xd0, 0xa2, 0x52, 0xbc, 0x7a, 0x44, 0xa6,
                0xbd, 0x84, 0xc0, 0x1c, 0xc8, 0x4b, 0x87}),
        Array<u8, 32>((u8[32]){0x3f, 0x81, 0x6a, 0xf6, 0xf3, 0xf7, 0x0f, 0x1d, 0x65, 0x35, 0x1d,
                0xd8, 0xaf, 0x01, 0x65, 0x12, 0x24, 0x63, 0x5b, 0x73, 0x6b, 0xa0, 0x96, 0xe6, 0x94,
                0x05, 0x3d, 0x8c, 0x1a, 0x6b, 0x14, 0x84}),
        Array<u8, 32>((u8[32]){0xfa, 0xef, 0xc3, 0x66, 0xe4, 0xb5, 0xc5, 0x34, 0x22, 0x79, 0xae,
                0x44, 0x93, 0x0d, 0x20, 0xe1, 0xa4, 0xe2, 0x70, 0xe8, 0x20, 0x1c, 0xd5, 0x24, 0xac,
                0x38, 0x64, 0x80, 0xdc, 0xb1, 0x7c, 0x9a}),
        Array<u8, 32>((u8[32]){0x3f, 0xa7, 0xe7, 0x8e, 0xfe, 0x95, 0xcc, 0x86, 0x50, 0xb5, 0xa3,
                0xf0, 0xa6, 0x5f, 0xd7, 0xdb, 0xfb, 0x51, 0x82, 0xdd, 0x26, 0x2e, 0xb7, 0xdb, 0x56,
                0xbb, 0x41, 0x1b, 0x2b, 0xfa, 0xfe, 0x3a}),
        Array<u8, 32>((u8[32]){0x75, 0xe3, 0x97, 0x9a, 0x0a, 0xe2, 0x03, 0x06, 0x2a, 0x17, 0xb1,
                0x7f, 0x16, 0x5c, 0x4a, 0xfe, 0x31, 0x96, 0x0b, 0x79, 0xb5, 0x3c, 0xeb, 0x6b, 0x38,
                0xc7, 0x6c, 0xe2, 0x80, 0x45, 0x93, 0xd7}),
        Array<u8, 32>((u8[32]){0x37, 0x66, 0xbc, 0x7a, 0x8d, 0xcb, 0xc7, 0x5d, 0x9f, 0xc4, 0x6d,
                0xa3, 0xeb, 0x15, 0xd7, 0x8b, 0x19, 0x91, 0x6c, 0x20, 0x72, 0x4c, 0x4a, 0x32, 0xc0,
                0x8d, 0x14, 0xc3, 0x86, 0xe6, 0x4d, 0x4c}),
        Array<u8, 32>((u8[32]){0x86, 0xa5, 0xe4, 0x54, 0x70, 0x27, 0x4e, 0x9a, 0x1f, 0x93, 0xc7,
                0x5d, 0xb9, 0x15, 0xda, 0x78, 0x54, 0x34, 0xc6, 0x87, 0x00, 0x51, 0x59, 0xe1, 0x8f,
                0xea, 0xd9, 0x67, 0x3c, 0xbe, 0x86, 0x62}),
        Array<u8, 32>((u8[32]){0xc3, 0xe8, 0xac, 0xf4, 0x72, 0x06, 0x3b, 0xfd, 0x14, 0xec, 0xe5,
                0xb5, 0x7b, 0x2f, 0x10, 0x4f, 0xb0, 0x74, 0x79, 0x38, 0x30, 0x64, 0x81, 0x1c, 0x22,
                0xbd, 0x4c, 0xb9, 0x84, 0x07, 0x23, 0xc5}),
        Array<u8, 32>((u8[32]){0x96, 0xfd, 0x90, 0x01, 0x75, 0xa5, 0x85, 0xbc, 0xe2, 0x32, 0x30,
                0xbe, 0xe1, 0x87, 0xcc, 0x31, 0x91, 0x64, 0x5e, 0x61, 0x73, 0x96, 0xc0, 0xb9, 0xeb,
                0x28, 0x8b, 0xe1, 0xa2, 0xba, 0x7a, 0xae}),
        Array<u8, 32>((u8[32]){0x2a, 0x90, 0x93, 0xda, 0x56, 0x37, 0x12, 0x6e, 0xc8, 0x8f, 0x89,
                0xa9, 0xb9, 0x5a, 0x99, 0x9d, 0x96, 0x4e, 0x5c, 0xe7, 0x1a, 0x72, 0x61, 0x46, 0x3e,
                0x71, 0x41, 0x23, 0xb2, 0xce, 0x37, 0x37}),
        Array<u8, 32>((u8[32]){0xaa, 0x44, 0xaa, 0xc5, 0x5f, 0x2e, 0xd6, 0x0a, 0x98, 0xf3, 0x51,
                0x55, 0xf4, 0x41, 0x0e, 0x29, 0x80, 0x2b, 0x3d, 0x53, 0xd3, 0xcf, 0x2c, 0xde, 0x39,
                0x88, 0x64, 0xf4, 0xc1, 0xa0, 0x4c, 0x03}),
        Array<u8, 32>((u8[32]){0x81, 0xe4, 0x0f, 0x5e, 0xc3, 0xba, 0x9f, 0xcd, 0x1a, 0x1c, 0xad,
                0x38, 0xbf, 0x8a, 0xfe, 0x1b, 0x34, 0xbb, 0x90, 0x80, 0x7d, 0x38, 0x09, 0x61, 0xf3,
                0xa3, 0xf0, 0xdc, 0x20, 0x12, 0x35, 0x7b}),
        Array<u8, 32>((u8[32]){0x60, 0x86, 0x08, 0x7c, 0xcb, 0x10, 0xbd, 0xee, 0x70, 0x6b, 0xb7,
                0x01, 0x48, 0xcb, 0x11, 0x7d, 0xf5, 0x92, 0x47, 0x20, 0xef, 0x68, 0xf1, 0x47, 0xdc,
                0x54, 0x84, 0x82, 0x75, 0xd0, 0xd7, 0x85}),
};

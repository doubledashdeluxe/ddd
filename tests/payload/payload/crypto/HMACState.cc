#include <payload/crypto/HMACState.hh>
#define SNITCH_IMPLEMENTATION
#include <snitch/snitch_all.hpp>

TEST_CASE("HMACState") {
    HMACState hmacState;

    Array<u8, 64> k0 = (u8[64]){0x88, 0x47, 0x04, 0xc3, 0x5d, 0x4f, 0xe5, 0xfa, 0xba, 0x34, 0xc9,
            0xba, 0xe0, 0xd0, 0x6f, 0xe1, 0x45, 0xf4, 0x61, 0xde, 0xc2, 0x45, 0x65, 0x01, 0x9b,
            0x58, 0x16, 0x2b, 0x21, 0x75, 0xa5, 0x01, 0xea, 0xe5, 0x9d, 0xd6, 0x97, 0x90, 0x9c,
            0x11, 0x23, 0x9d, 0x8c, 0x3a, 0xd9, 0xb9, 0x92, 0x54, 0xd2, 0x48, 0x0c, 0xa7, 0x0d,
            0xb8, 0x93, 0x3d, 0x9d, 0xc0, 0x67, 0xde, 0x9b, 0xd5, 0x8b, 0x74};
    hmacState.init(k0);
    Array<u8, 64> h0;
    hmacState.digest(h0);
    Array<u8, 64> expectedH0 = (u8[64]){0xa0, 0x86, 0xcb, 0xb7, 0x96, 0xc1, 0x6e, 0x3d, 0xa7, 0xcc,
            0x43, 0xba, 0x9d, 0x8d, 0x57, 0x34, 0x07, 0x88, 0x98, 0x6b, 0x1b, 0x86, 0x3d, 0x3d,
            0x8d, 0x56, 0x34, 0xa3, 0x1d, 0x75, 0x81, 0x8b, 0xb2, 0x4d, 0x5b, 0x58, 0x39, 0x15,
            0xa1, 0x97, 0xb0, 0xcb, 0x82, 0xe5, 0x8b, 0x06, 0x11, 0xee, 0xcb, 0x7a, 0x28, 0xe7,
            0x4e, 0xf8, 0x73, 0x5a, 0xa3, 0xd6, 0x64, 0x62, 0x95, 0x2d, 0xd1, 0xe2};
    CHECK(h0 == expectedH0);

    Array<u8, 64> k1 = (u8[64]){0x18, 0x63, 0x60, 0x15, 0x40, 0x1f, 0x0c, 0x42, 0x8d, 0x82, 0x03,
            0x81, 0x74, 0xa4, 0x37, 0x58, 0xf8, 0xd4, 0xdd, 0xd8, 0xa0, 0x79, 0xa8, 0x28, 0xb9,
            0x03, 0xdd, 0x87, 0x4c, 0x2d, 0x95, 0x1a, 0x95, 0x3b, 0x4b, 0xcb, 0x92, 0xbb, 0xb5,
            0xb0, 0x29, 0xbb, 0xa4, 0xf6, 0xa2, 0x29, 0xaa, 0x5f, 0x87, 0x0f, 0xef, 0x22, 0xfd,
            0xdf, 0xe6, 0x12, 0x35, 0xe8, 0x98, 0x25, 0x55, 0xc0, 0xcd, 0x83};
    hmacState.init(k1);
    Array<u8, 32> i0 = (u8[32]){0x34, 0xaf, 0x42, 0x26, 0xa2, 0x83, 0x1b, 0xd8, 0x1e, 0x9a, 0xb1,
            0xe2, 0x1b, 0x74, 0xba, 0x82, 0xd2, 0x18, 0x93, 0x72, 0xe7, 0x7e, 0x5a, 0x24, 0x09,
            0x4b, 0x3f, 0x88, 0x9f, 0x4d, 0x23, 0xaa};
    hmacState.update(i0.values(), i0.count());
    Array<u8, 64> h1;
    hmacState.digest(h1);
    Array<u8, 64> expectedH1 = (u8[64]){0x13, 0xea, 0xdc, 0x80, 0x7d, 0x9f, 0x08, 0x84, 0x78, 0x26,
            0xbf, 0x1b, 0xe0, 0x3c, 0x96, 0x8b, 0xa4, 0x18, 0x4d, 0x9e, 0x6e, 0xd6, 0xdf, 0x5a,
            0x64, 0xbc, 0xd9, 0x57, 0x01, 0xdf, 0x69, 0x20, 0xc5, 0x8c, 0x87, 0xc4, 0x88, 0x67,
            0x75, 0xd2, 0xf7, 0x54, 0x88, 0x03, 0x4c, 0x61, 0x2f, 0xea, 0x3d, 0x10, 0x53, 0xc2,
            0x37, 0xf5, 0x66, 0x65, 0x30, 0x6d, 0xf6, 0xb1, 0xb7, 0x13, 0x75, 0xf9};
    CHECK(h1 == expectedH1);

    Array<u8, 64> k2 = (u8[64]){0xd4, 0x39, 0xb5, 0x6b, 0xd3, 0xeb, 0x1a, 0xa3, 0x1a, 0xaf, 0x8e,
            0xa1, 0x8d, 0x7c, 0x6e, 0x04, 0x2c, 0xdc, 0x28, 0x41, 0x05, 0xc2, 0x94, 0xdd, 0xd0,
            0xee, 0x48, 0xe8, 0xce, 0xa8, 0xbe, 0xf5, 0x06, 0xbb, 0x53, 0xdf, 0x24, 0x12, 0x34,
            0x41, 0xef, 0x59, 0x8c, 0x26, 0xcf, 0xb9, 0x5c, 0xf3, 0x17, 0xd2, 0x57, 0x8f, 0xfe,
            0xbb, 0xf5, 0x2b, 0xb9, 0x4e, 0xa5, 0xeb, 0xc2, 0xcd, 0xd4, 0xa4};
    hmacState.init(k2);
    Array<u8, 48> i1 = (u8[48]){0x2b, 0x98, 0x1a, 0xbc, 0x8a, 0xa4, 0xbc, 0x23, 0x6c, 0x20, 0xa8,
            0x98, 0xff, 0x05, 0x35, 0xd1, 0xcc, 0x13, 0xd4, 0x94, 0xd0, 0x7f, 0x20, 0x04, 0xd0,
            0xce, 0x7b, 0xe2, 0xb0, 0x47, 0x95, 0x2b, 0x02, 0xd2, 0xd9, 0xd5, 0xb4, 0x04, 0xfb,
            0x20, 0x49, 0x87, 0x19, 0xf0, 0x9f, 0xec, 0x78, 0x48};
    hmacState.update(i1.values(), i1.count());
    Array<u8, 64> i2 = (u8[64]){0x39, 0x62, 0x09, 0xcd, 0x23, 0xaf, 0xb4, 0xa1, 0x5a, 0x07, 0x79,
            0xbc, 0x93, 0xdf, 0x87, 0x87, 0x56, 0x77, 0xb0, 0xd7, 0xeb, 0x2a, 0x04, 0x65, 0x98,
            0xa3, 0x19, 0x96, 0x0c, 0xb0, 0x39, 0x3d, 0x1f, 0x4f, 0x11, 0x93, 0x57, 0x23, 0x9d,
            0xa0, 0x43, 0x82, 0x54, 0x96, 0x11, 0x92, 0xb9, 0xcb, 0xc1, 0xbd, 0xeb, 0x2e, 0x76,
            0xa1, 0xff, 0xa3, 0xb6, 0xee, 0x2d, 0xd1, 0x6d, 0x4d, 0x00, 0x56};
    hmacState.update(i2.values(), i2.count());
    Array<u8, 64> h2;
    hmacState.digest(h2);
    Array<u8, 64> expectedH2 = (u8[64]){0x27, 0x58, 0x06, 0xa7, 0x8c, 0xaa, 0x71, 0x29, 0x22, 0x01,
            0xd9, 0x83, 0x03, 0x8d, 0xa0, 0xea, 0x83, 0x23, 0x9b, 0xc0, 0x98, 0x06, 0xad, 0xdc,
            0xfe, 0xc9, 0xf5, 0xb1, 0x20, 0xe3, 0x38, 0x51, 0xff, 0xfa, 0xf5, 0x7a, 0xea, 0x1c,
            0x93, 0xa2, 0x97, 0x2e, 0x0f, 0xd1, 0x65, 0xe1, 0xf2, 0xd9, 0x3a, 0x8f, 0xd7, 0x63,
            0x81, 0x8c, 0x6e, 0x8c, 0x29, 0xaf, 0x41, 0xf6, 0x72, 0x37, 0x30, 0x75};
    CHECK(h2 == expectedH2);
}
